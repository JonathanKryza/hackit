import facebook
import sys
import psycopg2
import re
import lib
import requests

APP_ID = '281793872016719'
APP_SECRET = 'e91a9a2e78f1e25e3142a16a6da5252e'

def find_urls(s):
    return re.findall(r'(https?://\S+)', s)
def remove_url(s):
    return re.sub(r'(https?://\S+)', '', s, flags=re.MULTILINE)
def get_post_id(fb_id):
    cur.execute("select id from \"Posts\" where fb_id = %s", (fb_id,))
    inserted_id = cur.fetchone()
    if inserted_id:
       return inserted_id[0]
    else: return None
def get_comment_id(fb_id):
    cur.execute("SELECT id FROM \"Comments\" WHERE fb_id = %s", (fb_id,))
    inserted_id = cur.fetchone()
    if inserted_id:
       return inserted_id[0]
    else: return None


# connect to db
    
con = psycopg2.connect(database="flobbitdb", user='edward', password='yolomol0')
cur = con.cursor()

token = facebook.get_app_access_token(APP_ID, APP_SECRET)
graph = facebook.GraphAPI(token)
feed = graph.get_object("759985267390294/feed?date_format=U")
data = feed['data']
loop = 0
while True:
   try: 
      for datum in data:
          loop += 1
          print(str(loop) + "Posts")
          fb_id = datum['id']
          full_post = datum['message']
          title = lib.title_generator(remove_url(full_post))
          title = lib.strip_newline(title)
          link = ""
          original_url = datum['actions'][0]['link']
          urls = find_urls(full_post)
          if len(urls) > 0:
              link = urls[0]
          time = datum['created_time']
          summary = graph.get_object(fb_id + "?fields=likes.summary(1),comments.summary(1)")
          likes = 0
          try:
              likes = summary['likes']['summary']['total_count']
              likes = int(likes)
          except: pass
          comment_count = 0
          try:
              comment_count = int(summary['comments']['summary']['total_count'])
          except: pass
          active = likes + comment_count
          inserted_id = get_post_id(fb_id)
          if not inserted_id:
              query = """INSERT INTO \"Posts\" 
              (fb_id, title, full_post, link, likes, comments, active, time) 
              VALUES (%s, %s, %s, %s, %s, %s, %s, to_timestamp(%s))"""
              cur.execute(query, (fb_id, title, full_post, link, likes, comment_count, likes+comment_count, time))
              inserted_id = get_post_id(fb_id)
          comments = None
          try:
              comments = datum['comments']['data']
              for c in comments:
                  votes = c['like_count']
                  comment = c['message']
                  fb_id = c['id']
                  time = c['created_time']
                  post_id = inserted_id
                  fb_user_id = c['from']['id']
                  fb_user_name = c['from']['name']
                  comment_id = get_comment_id(fb_id)
                  if not comment_id: 
                      query = "INSERT INTO \"Comments\" (votes, comment, fb_id, time, post_id, fb_user_id, fb_user_name) VALUES (%s, %s, %s, to_timestamp(%s),  %s, %s, %s)"
                      cur.execute(query, (votes, comment, fb_id, time, post_id, fb_user_id, fb_user_name))
                      comment_id = get_comment_id(fb_id)
              con.commit()
          except Exception as e: print "comment exception: " + str(e)
          con.commit()
      if "next" in feed['paging']:
           print "next page.."
           feed = requests.get(feed['paging']['next']).json()
           data = feed['data']
      else:
           print "no more new pages"
           break
   except Exception as e: print "post exception: " + str(e)
con.commit()
con.close()



